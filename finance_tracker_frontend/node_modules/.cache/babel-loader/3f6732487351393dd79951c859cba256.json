{"ast":null,"code":"import { combineReducers, createStore } from \"redux\"; //\n// const initialState = {\n//   addItemModal: {\n//     name: \"\",\n//     value: 0,\n//   },\n// };\n//\n// function reducer(state = initialState, action: any) {\n//   if (action.type === \"UPDATE_NEW_ITEM_NAME\") {\n//     return Object.assign({}, state, {\n//       addItemModal: { name: action.payload, value: state.addItemModal.value },\n//     });\n//   }\n//   if (action.type === \"UPDATE_NEW_ITEM_VALUE\") {\n//     return Object.assign({}, state, {\n//       addItemModal: { name: state.addItemModal.name, value: action.payload },\n//     });\n//   }\n//\n//   return state;\n// }\n\nexport let Constants;\n\n(function (Constants) {\n  Constants[\"Add_Item\"] = \"Add_ITEM\";\n})(Constants || (Constants = {}));\n\nconst init = {\n  list: []\n};\nexport function demoReducer(state = init, action) {\n  switch (action.type) {\n    default:\n      return state;\n  }\n}\nconst store = createStore(combineReducers({\n  demo: demoReducer\n})); // const defaultStore = createStore(reducer);\n\nexport default store;","map":{"version":3,"sources":["C:/Users/trommah/Desktop/FinancialManager/finance_tracker_frontend/src/store/Store.tsx"],"names":["combineReducers","createStore","Constants","init","list","demoReducer","state","action","type","store","demo"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,WAA1B,QAA6C,OAA7C,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA,WAAYC,SAAZ;;WAAYA,S;AAAAA,EAAAA,S;GAAAA,S,KAAAA,S;;AAIZ,MAAMC,IAAgB,GAAG;AACvBC,EAAAA,IAAI,EAAE;AADiB,CAAzB;AAIA,OAAO,SAASC,WAAT,CAAqBC,KAAiB,GAAGH,IAAzC,EAA+CI,MAA/C,EAAwE;AAC7E,UAAQA,MAAM,CAACC,IAAf;AACE;AACE,aAAOF,KAAP;AAFJ;AAID;AAKD,MAAMG,KAAK,GAAGR,WAAW,CACvBD,eAAe,CAAC;AACdU,EAAAA,IAAI,EAAEL;AADQ,CAAD,CADQ,CAAzB,C,CAMA;;AAEA,eAAeI,KAAf","sourcesContent":["import { combineReducers, createStore } from \"redux\";\n//\n// const initialState = {\n//   addItemModal: {\n//     name: \"\",\n//     value: 0,\n//   },\n// };\n//\n// function reducer(state = initialState, action: any) {\n//   if (action.type === \"UPDATE_NEW_ITEM_NAME\") {\n//     return Object.assign({}, state, {\n//       addItemModal: { name: action.payload, value: state.addItemModal.value },\n//     });\n//   }\n//   if (action.type === \"UPDATE_NEW_ITEM_VALUE\") {\n//     return Object.assign({}, state, {\n//       addItemModal: { name: state.addItemModal.name, value: action.payload },\n//     });\n//   }\n//\n//   return state;\n// }\n\nexport interface IDemoState {\n  list: string[];\n}\n\nexport enum Constants {\n  Add_Item = \"Add_ITEM\",\n}\n\nconst init: IDemoState = {\n  list: [],\n};\n\nexport function demoReducer(state: IDemoState = init, action: any): IDemoState {\n  switch (action.type) {\n    default:\n      return state;\n  }\n}\n\nexport interface IRootState {\n  demo: IDemoState;\n}\nconst store = createStore<IRootState, any, any, any>(\n  combineReducers({\n    demo: demoReducer,\n  })\n);\n\n// const defaultStore = createStore(reducer);\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}