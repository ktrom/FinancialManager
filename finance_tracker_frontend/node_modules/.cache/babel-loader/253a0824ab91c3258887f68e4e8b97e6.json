{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\trommah\\\\Desktop\\\\FinancialManager\\\\finance_tracker_frontend\\\\src\\\\MonthlyFinanceAssigner.tsx\";\n\n/** @jsx jsx */\nimport { jsx } from '@emotion/core';\nimport React from \"react\";\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport styled from \"@emotion/styled\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { Button, Modal } from \"react-bootstrap\";\nconst Header = styled.div({\n  backgroundColor: 'lightgrey',\n  padding: 10,\n  borderTopLeftRadius: 10,\n  borderTopRightRadius: 10\n});\nconst DroppableContainer = styled.div(props => ({\n  maxHeight: \"75vh\",\n  height: \"min-content\",\n  display: \"flex\",\n  flexDirection: \"column\",\n  margin: 20,\n  boxShadow: \"3px 3px 5px black\",\n  backgroundColor: props.isDraggingOver ? \"lightblue\" : \"lightgray\",\n  borderRadius: 10\n}));\nconst DroppableZone = styled.div({\n  borderBottomLeftRadius: 10,\n  borderBottomRightRadius: 10\n});\n\nfunction getItems(assigned) {\n  const items = new Array();\n\n  if (assigned) {\n    items.push({\n      id: \"0\",\n      name: \"kyle\",\n      value: 200,\n      assigned: true\n    });\n  } else {\n    items.push({\n      id: \"1\",\n      name: \"ronson\",\n      value: 800,\n      assigned: false\n    });\n  }\n\n  return items;\n}\n\n; // a little function to help us with reordering the result\n\nfunction reorder(list, startIndex, endIndex) {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n}\n\n;\n/**\r\n * Moves an item from one list to another list.\r\n */\n\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n  destClone.splice(droppableDestination.index, 0, removed);\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: 'none',\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n  borderRadius: 10,\n  // change background colour if dragging\n  background: isDragging ? 'darkgrey' : 'grey',\n  boxShadow: \"2px 2px 5px black\",\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? 'lightblue' : 'lightgrey',\n  padding: grid,\n  width: \"25vw\",\n  overflow: \"auto\",\n  margin: 10\n});\n\nfunction MyVerticallyCenteredModal(props) {\n  return jsx(Modal, Object.assign({}, props, {\n    size: \"lg\",\n    \"aria-labelledby\": \"contained-modal-title-vcenter\",\n    centered: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }), jsx(Modal.Header, {\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, jsx(Modal.Title, {\n    id: \"contained-modal-title-vcenter\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }\n  }, \"Modal heading\")), jsx(Modal.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }, jsx(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  }, \"Centered Modal\"), jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }, \"Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\")), jsx(Modal.Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }, jsx(Button, {\n    onClick: props.onHide,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }\n  }, \"Close\")));\n}\n\nfunction MonthlyFinanceAssigner() {\n  const [state, setState] = React.useState({\n    unassigned: getItems(false),\n    assigned: getItems(true)\n  });\n\n  const addItem = () => {\n    setState(function (prevState) {\n      const items = prevState.unassigned;\n      items.push({\n        assigned: false,\n        id: \"3\",\n        name: \"gg\",\n        value: 90\n      });\n      return {\n        unassigned: items,\n        assigned: prevState.assigned\n      };\n    });\n  };\n  /**\r\n   * A semi-generic way to handle multiple lists. Matches\r\n   * the IDs of the droppable container to the names of the\r\n   * source arrays stored in the state.\r\n   */\n\n\n  const id2List = {\n    droppable: state.unassigned,\n    droppable2: state.assigned\n  }; // @ts-ignore\n\n  const getList = id => id2List[id];\n\n  const onDragEnd = result => {\n    const {\n      source,\n      destination\n    } = result; // dropped outside the list\n\n    if (!destination) {\n      return;\n    }\n\n    if (source.droppableId === destination.droppableId) {\n      const items = reorder(getList(source.droppableId), source.index, destination.index);\n\n      if (source.droppableId === 'droppable2') {\n        setState({ ...state,\n          assigned: items\n        });\n      } else {\n        setState({ ...state,\n          unassigned: items\n        });\n      }\n    } else {\n      const result = move(getList(source.droppableId), getList(destination.droppableId), source, destination);\n      setState({\n        unassigned: result.droppable,\n        assigned: result.droppable2\n      });\n    }\n  }; // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n\n\n  return jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }\n  }, jsx(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }\n  }, jsx(\"div\", {\n    css: {\n      display: \"flex\",\n      placeContent: \"space-evenly\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 17\n    }\n  }, jsx(Droppable, {\n    droppableId: \"droppable\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 17\n    }\n  }, (provided, snapshot) => jsx(DroppableContainer, {\n    isDraggingOver: snapshot.isDraggingOver,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 25\n    }\n  }, jsx(Header, {\n    css: {\n      display: \"flex\",\n      placeContent: \"space-between\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 29\n    }\n  }, jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 90\n    }\n  }, \"unassigned items\"), jsx(\"div\", {\n    onClick: addItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 33\n    }\n  }, jsx(FontAwesomeIcon, {\n    icon: faPlus,\n    css: {\n      marginTop: 5,\n      marginRight: 15\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 33\n    }\n  }))), jsx(DroppableZone, {\n    ref: provided.innerRef,\n    style: getListStyle(snapshot.isDraggingOver),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 25\n    }\n  }, state.unassigned.map((item, index) => jsx(Draggable, {\n    key: item.id,\n    draggableId: item.id,\n    index: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 33\n    }\n  }, (provided, snapshot) => jsx(\"div\", Object.assign({\n    ref: provided.innerRef\n  }, provided.draggableProps, provided.dragHandleProps, {\n    style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 41\n    }\n  }), item.name))), provided.placeholder))), jsx(Droppable, {\n    droppableId: \"droppable2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 17\n    }\n  }, (provided, snapshot) => jsx(DroppableContainer, {\n    isDraggingOver: snapshot.isDraggingOver,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 25\n    }\n  }, jsx(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 29\n    }\n  }, \"expense items\"), jsx(DroppableZone, {\n    ref: provided.innerRef,\n    style: getListStyle(snapshot.isDraggingOver),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 29\n    }\n  }, state.assigned.map((item, index) => jsx(Draggable, {\n    key: item.id,\n    draggableId: item.id,\n    index: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 33\n    }\n  }, (provided, snapshot) => jsx(\"div\", Object.assign({\n    ref: provided.innerRef\n  }, provided.draggableProps, provided.dragHandleProps, {\n    style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 41\n    }\n  }), item.name))), provided.placeholder))))));\n}\n\nexport default MonthlyFinanceAssigner;","map":{"version":3,"sources":["C:/Users/trommah/Desktop/FinancialManager/finance_tracker_frontend/src/MonthlyFinanceAssigner.tsx"],"names":["jsx","React","DragDropContext","Droppable","Draggable","styled","FontAwesomeIcon","faPlus","Button","Modal","Header","div","backgroundColor","padding","borderTopLeftRadius","borderTopRightRadius","DroppableContainer","props","maxHeight","height","display","flexDirection","margin","boxShadow","isDraggingOver","borderRadius","DroppableZone","borderBottomLeftRadius","borderBottomRightRadius","getItems","assigned","items","Array","push","id","name","value","reorder","list","startIndex","endIndex","result","from","removed","splice","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","index","droppableId","grid","getItemStyle","isDragging","draggableStyle","userSelect","background","getListStyle","width","overflow","MyVerticallyCenteredModal","onHide","MonthlyFinanceAssigner","state","setState","useState","unassigned","addItem","prevState","id2List","droppable","droppable2","getList","onDragEnd","placeContent","provided","snapshot","marginTop","marginRight","innerRef","map","item","draggableProps","dragHandleProps","style","placeholder"],"mappings":"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","sourcesContent":["/** @jsx jsx */\r\nimport { jsx, css } from '@emotion/core'\r\nimport {MainContent} from \"./Enums/MainContent\";\r\nimport React from \"react\";\r\nimport { DraggableLocation, DropResult} from \"react-beautiful-dnd\";\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport styled from \"@emotion/styled\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport {Button, Modal} from \"react-bootstrap\";\r\ninterface Item{\r\n        id: string,\r\n        name: string,\r\n        value: number,\r\n        assigned: boolean,\r\n}\r\n\r\nconst Header = styled.div({\r\n    backgroundColor: 'lightgrey',\r\n    padding: 10,\r\n    borderTopLeftRadius: 10,\r\n    borderTopRightRadius: 10,\r\n});\r\n\r\nconst DroppableContainer = styled.div((props: {isDraggingOver: boolean}) => ({\r\n    maxHeight: \"75vh\",\r\n    height: \"min-content\",\r\n    display: \"flex\",\r\n    flexDirection:\"column\",\r\n    margin: 20,\r\n    boxShadow: \"3px 3px 5px black\",\r\n    backgroundColor: props.isDraggingOver ? \"lightblue\" : \"lightgray\",\r\n    borderRadius: 10,\r\n}));\r\n\r\nconst DroppableZone = styled.div({\r\n    borderBottomLeftRadius: 10,\r\n    borderBottomRightRadius: 10,\r\n});\r\n\r\nfunction getItems(assigned: boolean) : Item[] {\r\n        const items : Item[] = new Array();\r\n        if(assigned) {\r\n            items.push({id: \"0\", name: \"kyle\", value: 200, assigned: true});\r\n        }\r\n        else {\r\n            items.push({id: \"1\", name: \"ronson\", value: 800, assigned: false});\r\n        }\r\n\r\n        return items;\r\n};\r\n\r\n\r\n// a little function to help us with reordering the result\r\nfunction reorder (list : Item[], startIndex : number, endIndex : number) : Item[]{\r\n    const result : Item[] = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n\r\n    return result;\r\n};\r\n\r\n/**\r\n * Moves an item from one list to another list.\r\n */\r\nconst move = (source : any, destination : any, droppableSource : DraggableLocation, droppableDestination : DraggableLocation) => {\r\n    const sourceClone = Array.from(source);\r\n    const destClone = Array.from(destination);\r\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n    destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n    const result : any = {};\r\n    result[droppableSource.droppableId] = sourceClone;\r\n    result[droppableDestination.droppableId] = destClone;\r\n\r\n    return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = ( isDragging : boolean, draggableStyle : any) => ({\r\n    // some basic styles to make the items look a bit nicer\r\n    userSelect: 'none',\r\n    padding: grid * 2,\r\n    margin: `0 0 ${grid}px 0`,\r\n\r\n    borderRadius: 10,\r\n    // change background colour if dragging\r\n    background: isDragging ? 'darkgrey' : 'grey',\r\n    boxShadow: \"2px 2px 5px black\",\r\n    // styles we need to apply on draggables\r\n    ...draggableStyle\r\n});\r\n\r\nconst getListStyle = (isDraggingOver : boolean) => ({\r\n    background: isDraggingOver ? 'lightblue' : 'lightgrey',\r\n    padding: grid,\r\n    width: \"25vw\",\r\n    overflow: \"auto\",\r\n    margin: 10,\r\n});\r\n\r\n\r\nfunction MyVerticallyCenteredModal(props : any) {\r\n    return (\r\n        <Modal\r\n            {...props}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    Modal heading\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <h4>Centered Modal</h4>\r\n                <p>\r\n                    Cras mattis consectetur purus sit amet fermentum. Cras justo odio,\r\n                    dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac\r\n                    consectetur ac, vestibulum at eros.\r\n                </p>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button onClick={props.onHide}>Close</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nfunction MonthlyFinanceAssigner () {\r\n\r\n    const [state, setState] = React.useState<{unassigned: Item[], assigned: Item[]}>({unassigned: getItems(false), assigned: getItems(true)});\r\n\r\n    const addItem = ()=> {\r\n        setState(function(prevState){\r\n            const items = prevState.unassigned;\r\n            items.push({assigned: false, id: \"3\", name: \"gg\", value: 90})\r\n            return {unassigned: items, assigned: prevState.assigned};\r\n        })\r\n    }\r\n    /**\r\n     * A semi-generic way to handle multiple lists. Matches\r\n     * the IDs of the droppable container to the names of the\r\n     * source arrays stored in the state.\r\n     */\r\n    const id2List : {droppable: Item[], droppable2: Item[]} = {\r\n        droppable: state.unassigned,\r\n        droppable2: state.assigned,\r\n    };\r\n\r\n    // @ts-ignore\r\n        const getList = (id : string) => id2List[id];\r\n\r\n    const onDragEnd = (result : DropResult) => {\r\n        const { source, destination } = result;\r\n\r\n        // dropped outside the list\r\n        if (!destination) {\r\n            return;\r\n        }\r\n\r\n        if (source.droppableId === destination.droppableId) {\r\n            const items : Item[] = reorder(\r\n                getList(source.droppableId),\r\n                source.index,\r\n                destination.index\r\n            );\r\n\r\n            if (source.droppableId === 'droppable2') {\r\n               setState(  {...state, assigned: items })\r\n            }\r\n            else{\r\n                setState({...state, unassigned: items})\r\n            }\r\n        } else {\r\n            const result = move(\r\n                getList(source.droppableId),\r\n                getList(destination.droppableId),\r\n                source,\r\n                destination\r\n            );\r\n\r\n            setState({\r\n                unassigned: result.droppable,\r\n                assigned: result.droppable2\r\n            });\r\n        }\r\n    };\r\n\r\n    // Normally you would want to split things out into separate components.\r\n    // But in this example everything is just done in one place for simplicity\r\n        return (\r\n            <React.Fragment>\r\n                \r\n            <DragDropContext onDragEnd={onDragEnd}>\r\n                <div css={{display: \"flex\", placeContent: \"space-evenly\"}}>\r\n\r\n                <Droppable droppableId=\"droppable\">\r\n                    {(provided, snapshot) => (\r\n                        <DroppableContainer isDraggingOver={snapshot.isDraggingOver}>\r\n                            <Header css={{display:\"flex\", placeContent:\"space-between\"}}><div>unassigned items</div>\r\n                                <div onClick={addItem}>\r\n                                <FontAwesomeIcon icon={faPlus} css={{marginTop: 5, marginRight: 15}}/>\r\n                                </div>\r\n                            </Header>\r\n                        <DroppableZone\r\n                            ref={provided.innerRef}\r\n                            style={getListStyle(snapshot.isDraggingOver)}>\r\n                            {state.unassigned.map((item : Item, index : number) => (\r\n                                <Draggable\r\n                                    key={item.id}\r\n                                    draggableId={item.id}\r\n                                    index={index}>\r\n                                    {(provided, snapshot) => (\r\n                                        <div\r\n                                            ref={provided.innerRef}\r\n                                            {...provided.draggableProps}\r\n                                            {...provided.dragHandleProps}\r\n                                            style={getItemStyle(\r\n                                                snapshot.isDragging,\r\n                                                provided.draggableProps.style\r\n                                            )}>\r\n                                            {item.name}\r\n                                        </div>\r\n                                    )}\r\n                                </Draggable>\r\n                            ))}\r\n                            {provided.placeholder}\r\n                        </DroppableZone>\r\n                        </DroppableContainer>\r\n                    )}\r\n                </Droppable>\r\n                <Droppable droppableId=\"droppable2\">\r\n                    {(provided, snapshot) => (\r\n                        <DroppableContainer isDraggingOver={snapshot.isDraggingOver}>\r\n                            <Header>expense items</Header>\r\n                            <DroppableZone\r\n                            ref={provided.innerRef}\r\n                            style={getListStyle(snapshot.isDraggingOver)}>\r\n                            {state.assigned.map((item : Item, index : number) => (\r\n                                <Draggable\r\n                                    key={item.id}\r\n                                    draggableId={item.id}\r\n                                    index={index}>\r\n                                    {(provided, snapshot) => (\r\n                                        <div\r\n                                            ref={provided.innerRef}\r\n                                            {...provided.draggableProps}\r\n                                            {...provided.dragHandleProps}\r\n                                            style={getItemStyle(\r\n                                                snapshot.isDragging,\r\n                                                provided.draggableProps.style\r\n                                            )}>\r\n                                            {item.name}\r\n                                        </div>\r\n                                    )}\r\n                                </Draggable>\r\n                            ))}\r\n                            {provided.placeholder}\r\n                        </DroppableZone>\r\n                        </DroppableContainer>\r\n                    )}\r\n                </Droppable>\r\n                    </div>\r\n            </DragDropContext>\r\n            </React.Fragment>\r\n        );\r\n}\r\n\r\nexport default MonthlyFinanceAssigner;"]},"metadata":{},"sourceType":"module"}