{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tromtemp\\\\Documents\\\\Financials\\\\finance_tracker_frontend\\\\src\\\\MonthlyFinanceAssigner.tsx\";\nimport React from \"react\";\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'; // fake data generator\n\nconst getItems = (count, offset = 0) => Array.from({\n  length: count\n}, (v, k) => k).map(k => ({\n  id: `item-${k + offset}`,\n  content: `item ${k + offset}`\n})); // a little function to help us with reordering the result\n\n\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n/**\r\n * Moves an item from one list to another list.\r\n */\n\n\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n  destClone.splice(droppableDestination.index, 0, removed);\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: 'none',\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n  // change background colour if dragging\n  background: isDragging ? 'lightgreen' : 'grey',\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? 'lightblue' : 'lightgrey',\n  padding: grid,\n  width: 250\n});\n\nfunction MonthlyFinanceAssigner() {\n  //     items: getItems(10),\n  //     selected: getItems(5, 10)\n  // };\n  const [state, setState] = React.useState({\n    items: getItems(10),\n    selected: getItems(5, 10)\n  });\n  /**\r\n   * A semi-generic way to handle multiple lists. Matches\r\n   * the IDs of the droppable container to the names of the\r\n   * source arrays stored in the state.\r\n   */\n\n  const id2List = {\n    droppable: 'items',\n    droppable2: 'selected'\n  };\n\n  const getList = id => [id2List[id]];\n\n  const onDragEnd = result => {\n    const {\n      source,\n      destination\n    } = result; // dropped outside the list\n\n    if (!destination) {\n      return;\n    }\n\n    if (source.droppableId === destination.droppableId) {\n      const items = reorder(getList(source.droppableId), source.index, destination.index);\n\n      if (source.droppableId === 'droppable2') {\n        setState({ ...state,\n          selected: items\n        });\n      } else {\n        setState({ ...state,\n          items: items\n        });\n      }\n    } else {\n      const result = move(getList(source.droppableId), getList(destination.droppableId), source, destination);\n      setState({\n        items: result.droppable,\n        selected: result.droppable2\n      });\n    }\n  }; // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n\n\n  return /*#__PURE__*/React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Droppable, {\n    droppableId: \"droppable\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }, (provided, snapshot) => /*#__PURE__*/React.createElement(\"div\", {\n    ref: provided.innerRef,\n    style: getListStyle(snapshot.isDraggingOver),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 25\n    }\n  }, state.items.map((item, index) => /*#__PURE__*/React.createElement(Draggable, {\n    key: item.id,\n    draggableId: item.id,\n    index: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 33\n    }\n  }, (provided, snapshot) => /*#__PURE__*/React.createElement(\"div\", Object.assign({\n    ref: provided.innerRef\n  }, provided.draggableProps, provided.dragHandleProps, {\n    style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 41\n    }\n  }), item.content))), provided.placeholder)), /*#__PURE__*/React.createElement(Droppable, {\n    droppableId: \"droppable2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }\n  }, (provided, snapshot) => /*#__PURE__*/React.createElement(\"div\", {\n    ref: provided.innerRef,\n    style: getListStyle(snapshot.isDraggingOver),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 25\n    }\n  }, state.selected.map((item, index) => /*#__PURE__*/React.createElement(Draggable, {\n    key: item.id,\n    draggableId: item.id,\n    index: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 33\n    }\n  }, (provided, snapshot) => /*#__PURE__*/React.createElement(\"div\", Object.assign({\n    ref: provided.innerRef\n  }, provided.draggableProps, provided.dragHandleProps, {\n    style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 41\n    }\n  }), item.content))), provided.placeholder)));\n}\n\nexport default MonthlyFinanceAssigner;","map":{"version":3,"sources":["C:/Users/tromtemp/Documents/Financials/finance_tracker_frontend/src/MonthlyFinanceAssigner.tsx"],"names":["React","DragDropContext","Droppable","Draggable","getItems","count","offset","Array","from","length","v","k","map","id","content","reorder","list","startIndex","endIndex","result","removed","splice","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","index","droppableId","grid","getItemStyle","isDragging","draggableStyle","userSelect","padding","margin","background","getListStyle","isDraggingOver","width","MonthlyFinanceAssigner","state","setState","useState","items","selected","id2List","droppable","droppable2","getList","onDragEnd","provided","snapshot","innerRef","item","draggableProps","dragHandleProps","style","placeholder"],"mappings":";AACA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,SAASC,eAAT,EAA0BC,SAA1B,EAAqCC,SAArC,QAAsD,qBAAtD,C,CAEA;;AACA,MAAMC,QAAuC,GAAG,CAACC,KAAD,EAAiBC,MAAM,GAAG,CAA1B,KAC5CC,KAAK,CAACC,IAAN,CAAW;AAAEC,EAAAA,MAAM,EAAEJ;AAAV,CAAX,EAA8B,CAACK,CAAD,EAAIC,CAAJ,KAAUA,CAAxC,EAA2CC,GAA3C,CAA+CD,CAAC,KAAK;AACjDE,EAAAA,EAAE,EAAG,QAAOF,CAAC,GAAGL,MAAO,EAD0B;AAEjDQ,EAAAA,OAAO,EAAG,QAAOH,CAAC,GAAGL,MAAO;AAFqB,CAAL,CAAhD,CADJ,C,CAMA;;;AACA,MAAMS,OAAO,GAAG,CAACC,IAAD,EAAaC,UAAb,EAAkCC,QAAlC,KAAwD;AACpE,QAAMC,MAAM,GAAGZ,KAAK,CAACC,IAAN,CAAWQ,IAAX,CAAf;AACA,QAAM,CAACI,OAAD,IAAYD,MAAM,CAACE,MAAP,CAAcJ,UAAd,EAA0B,CAA1B,CAAlB;AACAE,EAAAA,MAAM,CAACE,MAAP,CAAcH,QAAd,EAAwB,CAAxB,EAA2BE,OAA3B;AAEA,SAAOD,MAAP;AACH,CAND;AAQA;;;;;AAGA,MAAMG,IAAI,GAAG,CAACC,MAAD,EAAeC,WAAf,EAAkCC,eAAlC,EAAuEC,oBAAvE,KAAoH;AAC7H,QAAMC,WAAW,GAAGpB,KAAK,CAACC,IAAN,CAAWe,MAAX,CAApB;AACA,QAAMK,SAAS,GAAGrB,KAAK,CAACC,IAAN,CAAWgB,WAAX,CAAlB;AACA,QAAM,CAACJ,OAAD,IAAYO,WAAW,CAACN,MAAZ,CAAmBI,eAAe,CAACI,KAAnC,EAA0C,CAA1C,CAAlB;AAEAD,EAAAA,SAAS,CAACP,MAAV,CAAiBK,oBAAoB,CAACG,KAAtC,EAA6C,CAA7C,EAAgDT,OAAhD;AAEA,QAAMD,MAAY,GAAG,EAArB;AACAA,EAAAA,MAAM,CAACM,eAAe,CAACK,WAAjB,CAAN,GAAsCH,WAAtC;AACAR,EAAAA,MAAM,CAACO,oBAAoB,CAACI,WAAtB,CAAN,GAA2CF,SAA3C;AAEA,SAAOT,MAAP;AACH,CAZD;;AAcA,MAAMY,IAAI,GAAG,CAAb;;AAEA,MAAMC,YAAY,GAAG,CAACC,UAAD,EAAuBC,cAAvB,MAAiD;AAClE;AACAC,EAAAA,UAAU,EAAE,MAFsD;AAGlEC,EAAAA,OAAO,EAAEL,IAAI,GAAG,CAHkD;AAIlEM,EAAAA,MAAM,EAAG,OAAMN,IAAK,MAJ8C;AAMlE;AACAO,EAAAA,UAAU,EAAEL,UAAU,GAAG,YAAH,GAAkB,MAP0B;AASlE;AACA,KAAGC;AAV+D,CAAjD,CAArB;;AAaA,MAAMK,YAAY,GAAIC,cAAD,KAA+B;AAChDF,EAAAA,UAAU,EAAEE,cAAc,GAAG,WAAH,GAAiB,WADK;AAEhDJ,EAAAA,OAAO,EAAEL,IAFuC;AAGhDU,EAAAA,KAAK,EAAE;AAHyC,CAA/B,CAArB;;AAMA,SAASC,sBAAT,GAAmC;AAE/B;AACA;AACA;AAEA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoB5C,KAAK,CAAC6C,QAAN,CAA+F;AAACC,IAAAA,KAAK,EAAE1C,QAAQ,CAAC,EAAD,CAAhB;AAAsB2C,IAAAA,QAAQ,EAAE3C,QAAQ,CAAC,CAAD,EAAI,EAAJ;AAAxC,GAA/F,CAA1B;AACA;;;;;;AAKA,QAAM4C,OAAa,GAAG;AAClBC,IAAAA,SAAS,EAAE,OADO;AAElBC,IAAAA,UAAU,EAAE;AAFM,GAAtB;;AAKA,QAAMC,OAAO,GAAItC,EAAD,IAAiB,CAACmC,OAAO,CAACnC,EAAD,CAAR,CAAjC;;AAEA,QAAMuC,SAAS,GAAIjC,MAAD,IAAyB;AACvC,UAAM;AAAEI,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAA0BL,MAAhC,CADuC,CAGvC;;AACA,QAAI,CAACK,WAAL,EAAkB;AACd;AACH;;AAED,QAAID,MAAM,CAACO,WAAP,KAAuBN,WAAW,CAACM,WAAvC,EAAoD;AAChD,YAAMgB,KAAK,GAAG/B,OAAO,CACjBoC,OAAO,CAAC5B,MAAM,CAACO,WAAR,CADU,EAEjBP,MAAM,CAACM,KAFU,EAGjBL,WAAW,CAACK,KAHK,CAArB;;AAMA,UAAIN,MAAM,CAACO,WAAP,KAAuB,YAA3B,EAAyC;AACtCc,QAAAA,QAAQ,CAAG,EAAC,GAAGD,KAAJ;AAAWI,UAAAA,QAAQ,EAAED;AAArB,SAAH,CAAR;AACF,OAFD,MAGI;AACAF,QAAAA,QAAQ,CAAC,EAAC,GAAGD,KAAJ;AAAWG,UAAAA,KAAK,EAAEA;AAAlB,SAAD,CAAR;AACH;AACJ,KAbD,MAaO;AACH,YAAM3B,MAAM,GAAGG,IAAI,CACf6B,OAAO,CAAC5B,MAAM,CAACO,WAAR,CADQ,EAEfqB,OAAO,CAAC3B,WAAW,CAACM,WAAb,CAFQ,EAGfP,MAHe,EAIfC,WAJe,CAAnB;AAOAoB,MAAAA,QAAQ,CAAC;AACLE,QAAAA,KAAK,EAAE3B,MAAM,CAAC8B,SADT;AAELF,QAAAA,QAAQ,EAAE5B,MAAM,CAAC+B;AAFZ,OAAD,CAAR;AAIH;AACJ,GAlCD,CAnB+B,CAuD/B;AACA;;;AACI,sBACI,oBAAC,eAAD;AAAiB,IAAA,SAAS,EAAEE,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAW,IAAA,WAAW,EAAC,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,CAACC,QAAD,EAAWC,QAAX,kBACG;AACI,IAAA,GAAG,EAAED,QAAQ,CAACE,QADlB;AAEI,IAAA,KAAK,EAAEhB,YAAY,CAACe,QAAQ,CAACd,cAAV,CAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGKG,KAAK,CAACG,KAAN,CAAYlC,GAAZ,CAAgB,CAAC4C,IAAD,EAAyC3B,KAAzC,kBACb,oBAAC,SAAD;AACI,IAAA,GAAG,EAAE2B,IAAI,CAAC3C,EADd;AAEI,IAAA,WAAW,EAAE2C,IAAI,CAAC3C,EAFtB;AAGI,IAAA,KAAK,EAAEgB,KAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIK,CAACwB,QAAD,EAAWC,QAAX,kBACG;AACI,IAAA,GAAG,EAAED,QAAQ,CAACE;AADlB,KAEQF,QAAQ,CAACI,cAFjB,EAGQJ,QAAQ,CAACK,eAHjB;AAII,IAAA,KAAK,EAAE1B,YAAY,CACfsB,QAAQ,CAACrB,UADM,EAEfoB,QAAQ,CAACI,cAAT,CAAwBE,KAFT,CAJvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQKH,IAAI,CAAC1C,OARV,CALR,CADH,CAHL,EAsBKuC,QAAQ,CAACO,WAtBd,CAFR,CADJ,eA6BI,oBAAC,SAAD;AAAW,IAAA,WAAW,EAAC,YAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,CAACP,QAAD,EAAWC,QAAX,kBACG;AACI,IAAA,GAAG,EAAED,QAAQ,CAACE,QADlB;AAEI,IAAA,KAAK,EAAEhB,YAAY,CAACe,QAAQ,CAACd,cAAV,CAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGKG,KAAK,CAACI,QAAN,CAAenC,GAAf,CAAmB,CAAC4C,IAAD,EAAqC3B,KAArC,kBAChB,oBAAC,SAAD;AACI,IAAA,GAAG,EAAE2B,IAAI,CAAC3C,EADd;AAEI,IAAA,WAAW,EAAE2C,IAAI,CAAC3C,EAFtB;AAGI,IAAA,KAAK,EAAEgB,KAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIK,CAACwB,QAAD,EAAWC,QAAX,kBACG;AACI,IAAA,GAAG,EAAED,QAAQ,CAACE;AADlB,KAEQF,QAAQ,CAACI,cAFjB,EAGQJ,QAAQ,CAACK,eAHjB;AAII,IAAA,KAAK,EAAE1B,YAAY,CACfsB,QAAQ,CAACrB,UADM,EAEfoB,QAAQ,CAACI,cAAT,CAAwBE,KAFT,CAJvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQKH,IAAI,CAAC1C,OARV,CALR,CADH,CAHL,EAsBKuC,QAAQ,CAACO,WAtBd,CAFR,CA7BJ,CADJ;AA4DP;;AAED,eAAelB,sBAAf","sourcesContent":["import {MainContent} from \"./Enums/MainContent\";\r\nimport React from \"react\";\r\nimport { DraggableLocation, DropResult} from \"react-beautiful-dnd\";\r\nimport ReactDOM from 'react-dom';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\n// fake data generator\r\nconst getItems : {id: string, content:string} = (count : number, offset = 0) =>\r\n    Array.from({ length: count }, (v, k) => k).map(k => ({\r\n        id: `item-${k + offset}`,\r\n        content: `item ${k + offset}`\r\n    }));\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list : any, startIndex : number, endIndex : number) => {\r\n    const result = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n\r\n    return result;\r\n};\r\n\r\n/**\r\n * Moves an item from one list to another list.\r\n */\r\nconst move = (source : any, destination : any, droppableSource : DraggableLocation, droppableDestination : DraggableLocation) => {\r\n    const sourceClone = Array.from(source);\r\n    const destClone = Array.from(destination);\r\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n    destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n    const result : any = {};\r\n    result[droppableSource.droppableId] = sourceClone;\r\n    result[droppableDestination.droppableId] = destClone;\r\n\r\n    return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging : boolean, draggableStyle : any) => ({\r\n    // some basic styles to make the items look a bit nicer\r\n    userSelect: 'none',\r\n    padding: grid * 2,\r\n    margin: `0 0 ${grid}px 0`,\r\n\r\n    // change background colour if dragging\r\n    background: isDragging ? 'lightgreen' : 'grey',\r\n\r\n    // styles we need to apply on draggables\r\n    ...draggableStyle\r\n});\r\n\r\nconst getListStyle = (isDraggingOver : boolean) => ({\r\n    background: isDraggingOver ? 'lightblue' : 'lightgrey',\r\n    padding: grid,\r\n    width: 250\r\n});\r\n\r\nfunction MonthlyFinanceAssigner () {\r\n\r\n    //     items: getItems(10),\r\n    //     selected: getItems(5, 10)\r\n    // };\r\n\r\n    const [state, setState] = React.useState<{items: {id: string, content: string}, selected: {id: string, content:string}}>({items: getItems(10), selected: getItems(5, 10)});\r\n    /**\r\n     * A semi-generic way to handle multiple lists. Matches\r\n     * the IDs of the droppable container to the names of the\r\n     * source arrays stored in the state.\r\n     */\r\n    const id2List : any = {\r\n        droppable: 'items',\r\n        droppable2: 'selected'\r\n    };\r\n\r\n    const getList = (id : string) => [id2List[id]];\r\n\r\n    const onDragEnd = (result : DropResult) => {\r\n        const { source, destination } = result;\r\n\r\n        // dropped outside the list\r\n        if (!destination) {\r\n            return;\r\n        }\r\n\r\n        if (source.droppableId === destination.droppableId) {\r\n            const items = reorder(\r\n                getList(source.droppableId),\r\n                source.index,\r\n                destination.index\r\n            );\r\n\r\n            if (source.droppableId === 'droppable2') {\r\n               setState(  {...state, selected: items })\r\n            }\r\n            else{\r\n                setState({...state, items: items})\r\n            }\r\n        } else {\r\n            const result = move(\r\n                getList(source.droppableId),\r\n                getList(destination.droppableId),\r\n                source,\r\n                destination\r\n            );\r\n\r\n            setState({\r\n                items: result.droppable,\r\n                selected: result.droppable2\r\n            });\r\n        }\r\n    };\r\n\r\n    // Normally you would want to split things out into separate components.\r\n    // But in this example everything is just done in one place for simplicity\r\n        return (\r\n            <DragDropContext onDragEnd={onDragEnd}>\r\n                <Droppable droppableId=\"droppable\">\r\n                    {(provided, snapshot) => (\r\n                        <div\r\n                            ref={provided.innerRef}\r\n                            style={getListStyle(snapshot.isDraggingOver)}>\r\n                            {state.items.map((item : {id : string, content : string}, index : number) => (\r\n                                <Draggable\r\n                                    key={item.id}\r\n                                    draggableId={item.id}\r\n                                    index={index}>\r\n                                    {(provided, snapshot) => (\r\n                                        <div\r\n                                            ref={provided.innerRef}\r\n                                            {...provided.draggableProps}\r\n                                            {...provided.dragHandleProps}\r\n                                            style={getItemStyle(\r\n                                                snapshot.isDragging,\r\n                                                provided.draggableProps.style\r\n                                            )}>\r\n                                            {item.content}\r\n                                        </div>\r\n                                    )}\r\n                                </Draggable>\r\n                            ))}\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n                <Droppable droppableId=\"droppable2\">\r\n                    {(provided, snapshot) => (\r\n                        <div\r\n                            ref={provided.innerRef}\r\n                            style={getListStyle(snapshot.isDraggingOver)}>\r\n                            {state.selected.map((item : {id:string, content:string}, index : number) => (\r\n                                <Draggable\r\n                                    key={item.id}\r\n                                    draggableId={item.id}\r\n                                    index={index}>\r\n                                    {(provided, snapshot) => (\r\n                                        <div\r\n                                            ref={provided.innerRef}\r\n                                            {...provided.draggableProps}\r\n                                            {...provided.dragHandleProps}\r\n                                            style={getItemStyle(\r\n                                                snapshot.isDragging,\r\n                                                provided.draggableProps.style\r\n                                            )}>\r\n                                            {item.content}\r\n                                        </div>\r\n                                    )}\r\n                                </Draggable>\r\n                            ))}\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        );\r\n}\r\n\r\nexport default MonthlyFinanceAssigner;"]},"metadata":{},"sourceType":"module"}