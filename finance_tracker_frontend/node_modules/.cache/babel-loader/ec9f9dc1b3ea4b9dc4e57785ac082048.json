{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\trommah\\\\Desktop\\\\FinancialManager\\\\finance_tracker_frontend\\\\src\\\\MonthlyFinanceAssigner.tsx\";\n\n/** @jsx jsx */\nimport { jsx } from '@emotion/core';\nimport React from \"react\";\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport styled from \"@emotion/styled\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nconst Header = styled.div({\n  backgroundColor: 'lightgrey',\n  padding: 10,\n  borderTopLeftRadius: 10,\n  borderTopRightRadius: 10\n});\nconst DroppableContainer = styled.div(props => ({\n  maxHeight: \"75vh\",\n  height: \"min-content\",\n  display: \"flex\",\n  flexDirection: \"column\",\n  margin: 20,\n  boxShadow: \"3px 3px 5px black\",\n  backgroundColor: props.isDraggingOver ? \"lightblue\" : \"lightgray\",\n  borderRadius: 10\n}));\nconst DroppableZone = styled.div({\n  borderBottomLeftRadius: 10,\n  borderBottomRightRadius: 10\n});\n\nfunction getItems(count, offset = 0) {\n  const items = new Array();\n  items.push({\n    id: \"0\",\n    name: \"kyle\",\n    value: 200\n  });\n  items.push({\n    id: \"1\",\n    name: \"ronson\",\n    value: 800\n  });\n  return items;\n}\n\n; // a little function to help us with reordering the result\n\nfunction reorder(list, startIndex, endIndex) {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n}\n\n;\n/**\r\n * Moves an item from one list to another list.\r\n */\n\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n  destClone.splice(droppableDestination.index, 0, removed);\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: 'none',\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n  borderRadius: 10,\n  // change background colour if dragging\n  background: isDragging ? 'darkgrey' : 'grey',\n  boxShadow: \"2px 2px 5px black\",\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? 'lightblue' : 'lightgrey',\n  padding: grid,\n  width: \"25vw\",\n  overflow: \"auto\",\n  margin: 10\n});\n\nfunction MonthlyFinanceAssigner() {\n  const [state, setState] = React.useState({\n    items: getItems(10),\n    selected: getItems(5, 10)\n  });\n  /**\r\n   * A semi-generic way to handle multiple lists. Matches\r\n   * the IDs of the droppable container to the names of the\r\n   * source arrays stored in the state.\r\n   */\n\n  const id2List = {\n    droppable: state.items,\n    droppable2: state.selected\n  }; // @ts-ignore\n\n  const getList = id => id2List[id];\n\n  const onDragEnd = result => {\n    const {\n      source,\n      destination\n    } = result; // dropped outside the list\n\n    if (!destination) {\n      return;\n    }\n\n    if (source.droppableId === destination.droppableId) {\n      const items = reorder(getList(source.droppableId), source.index, destination.index);\n\n      if (source.droppableId === 'droppable2') {\n        setState({ ...state,\n          selected: items\n        });\n      } else {\n        setState({ ...state,\n          items: items\n        });\n      }\n    } else {\n      const result = move(getList(source.droppableId), getList(destination.droppableId), source, destination);\n      setState({\n        items: result.droppable,\n        selected: result.droppable2\n      });\n    }\n  }; // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n\n\n  return jsx(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }\n  }, jsx(\"div\", {\n    css: {\n      display: \"flex\",\n      placeContent: \"space-evenly\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 17\n    }\n  }, jsx(Droppable, {\n    droppableId: \"droppable\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 17\n    }\n  }, (provided, snapshot) => jsx(DroppableContainer, {\n    isDraggingOver: snapshot.isDraggingOver,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 25\n    }\n  }, jsx(Header, {\n    css: {\n      display: \"flex\",\n      placeContent: \"space-between\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 29\n    }\n  }, jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 90\n    }\n  }, \"unassigned items\"), \" \", jsx(FontAwesomeIcon, {\n    icon: faPlus,\n    css: {\n      marginTop: 5,\n      marginRight: 15\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 118\n    }\n  })), jsx(DroppableZone, {\n    ref: provided.innerRef,\n    style: getListStyle(snapshot.isDraggingOver),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 25\n    }\n  }, state.items.map((item, index) => jsx(Draggable, {\n    key: item.id,\n    draggableId: item.id,\n    index: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 33\n    }\n  }, (provided, snapshot) => jsx(\"div\", Object.assign({\n    ref: provided.innerRef\n  }, provided.draggableProps, provided.dragHandleProps, {\n    style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 41\n    }\n  }), item.name))), provided.placeholder))), jsx(Droppable, {\n    droppableId: \"droppable2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 17\n    }\n  }, (provided, snapshot) => jsx(DroppableContainer, {\n    isDraggingOver: snapshot.isDraggingOver,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 25\n    }\n  }, jsx(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 29\n    }\n  }, \"expense items\"), jsx(DroppableZone, {\n    ref: provided.innerRef,\n    style: getListStyle(snapshot.isDraggingOver),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 29\n    }\n  }, state.selected.map((item, index) => jsx(Draggable, {\n    key: item.id,\n    draggableId: item.id,\n    index: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 33\n    }\n  }, (provided, snapshot) => jsx(\"div\", Object.assign({\n    ref: provided.innerRef\n  }, provided.draggableProps, provided.dragHandleProps, {\n    style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 41\n    }\n  }), item.name))), provided.placeholder)))));\n}\n\nexport default MonthlyFinanceAssigner;","map":{"version":3,"sources":["C:/Users/trommah/Desktop/FinancialManager/finance_tracker_frontend/src/MonthlyFinanceAssigner.tsx"],"names":["jsx","React","DragDropContext","Droppable","Draggable","styled","FontAwesomeIcon","faPlus","Header","div","backgroundColor","padding","borderTopLeftRadius","borderTopRightRadius","DroppableContainer","props","maxHeight","height","display","flexDirection","margin","boxShadow","isDraggingOver","borderRadius","DroppableZone","borderBottomLeftRadius","borderBottomRightRadius","getItems","count","offset","items","Array","push","id","name","value","reorder","list","startIndex","endIndex","result","from","removed","splice","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","index","droppableId","grid","getItemStyle","isDragging","draggableStyle","userSelect","background","getListStyle","width","overflow","MonthlyFinanceAssigner","state","setState","useState","selected","id2List","droppable","droppable2","getList","onDragEnd","placeContent","provided","snapshot","marginTop","marginRight","innerRef","map","item","draggableProps","dragHandleProps","style","placeholder"],"mappings":"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","sourcesContent":["/** @jsx jsx */\r\nimport { jsx, css } from '@emotion/core'\r\nimport {MainContent} from \"./Enums/MainContent\";\r\nimport React from \"react\";\r\nimport { DraggableLocation, DropResult} from \"react-beautiful-dnd\";\r\nimport ReactDOM from 'react-dom';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport styled from \"@emotion/styled\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\ninterface Item{\r\n        id: string,\r\n        name: string,\r\n        value: number,\r\n}\r\n\r\nconst Header = styled.div({\r\n    backgroundColor: 'lightgrey',\r\n    padding: 10,\r\n    borderTopLeftRadius: 10,\r\n    borderTopRightRadius: 10,\r\n});\r\n\r\nconst DroppableContainer = styled.div((props: {isDraggingOver: boolean}) => ({\r\n    maxHeight: \"75vh\",\r\n    height: \"min-content\",\r\n    display: \"flex\",\r\n    flexDirection:\"column\",\r\n    margin: 20,\r\n    boxShadow: \"3px 3px 5px black\",\r\n    backgroundColor: props.isDraggingOver ? \"lightblue\" : \"lightgray\",\r\n    borderRadius: 10,\r\n}));\r\n\r\nconst DroppableZone = styled.div({\r\n    borderBottomLeftRadius: 10,\r\n    borderBottomRightRadius: 10,\r\n});\r\n\r\nfunction getItems(count: number, offset = 0) : Item[] {\r\n        const items : Item[] = new Array();\r\n        items.push({id: \"0\", name: \"kyle\", value: 200});\r\n        items.push({id: \"1\",name: \"ronson\", value: 800});\r\n\r\n        return items;\r\n};\r\n\r\n\r\n// a little function to help us with reordering the result\r\nfunction reorder (list : Item[], startIndex : number, endIndex : number) : Item[]{\r\n    const result : Item[] = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n\r\n    return result;\r\n};\r\n\r\n/**\r\n * Moves an item from one list to another list.\r\n */\r\nconst move = (source : any, destination : any, droppableSource : DraggableLocation, droppableDestination : DraggableLocation) => {\r\n    const sourceClone = Array.from(source);\r\n    const destClone = Array.from(destination);\r\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n    destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n    const result : any = {};\r\n    result[droppableSource.droppableId] = sourceClone;\r\n    result[droppableDestination.droppableId] = destClone;\r\n\r\n    return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = ( isDragging : boolean, draggableStyle : any) => ({\r\n    // some basic styles to make the items look a bit nicer\r\n    userSelect: 'none',\r\n    padding: grid * 2,\r\n    margin: `0 0 ${grid}px 0`,\r\n\r\n    borderRadius: 10,\r\n    // change background colour if dragging\r\n    background: isDragging ? 'darkgrey' : 'grey',\r\n    boxShadow: \"2px 2px 5px black\",\r\n    // styles we need to apply on draggables\r\n    ...draggableStyle\r\n});\r\n\r\nconst getListStyle = (isDraggingOver : boolean) => ({\r\n    background: isDraggingOver ? 'lightblue' : 'lightgrey',\r\n    padding: grid,\r\n    width: \"25vw\",\r\n    overflow: \"auto\",\r\n    margin: 10,\r\n});\r\n\r\nfunction MonthlyFinanceAssigner () {\r\n\r\n    const [state, setState] = React.useState<{items: Item[], selected: Item[]}>({items: getItems(10), selected: getItems(5, 10)});\r\n    /**\r\n     * A semi-generic way to handle multiple lists. Matches\r\n     * the IDs of the droppable container to the names of the\r\n     * source arrays stored in the state.\r\n     */\r\n    const id2List : {droppable: Item[], droppable2: Item[]} = {\r\n        droppable: state.items,\r\n        droppable2: state.selected,\r\n    };\r\n\r\n    // @ts-ignore\r\n        const getList = (id : string) => id2List[id];\r\n\r\n    const onDragEnd = (result : DropResult) => {\r\n        const { source, destination } = result;\r\n\r\n        // dropped outside the list\r\n        if (!destination) {\r\n            return;\r\n        }\r\n\r\n        if (source.droppableId === destination.droppableId) {\r\n            const items : Item[] = reorder(\r\n                getList(source.droppableId),\r\n                source.index,\r\n                destination.index\r\n            );\r\n\r\n            if (source.droppableId === 'droppable2') {\r\n               setState(  {...state, selected: items })\r\n            }\r\n            else{\r\n                setState({...state, items: items})\r\n            }\r\n        } else {\r\n            const result = move(\r\n                getList(source.droppableId),\r\n                getList(destination.droppableId),\r\n                source,\r\n                destination\r\n            );\r\n\r\n            setState({\r\n                items: result.droppable,\r\n                selected: result.droppable2\r\n            });\r\n        }\r\n    };\r\n\r\n    // Normally you would want to split things out into separate components.\r\n    // But in this example everything is just done in one place for simplicity\r\n        return (\r\n            <DragDropContext onDragEnd={onDragEnd}>\r\n                <div css={{display: \"flex\", placeContent: \"space-evenly\"}}>\r\n\r\n                <Droppable droppableId=\"droppable\">\r\n                    {(provided, snapshot) => (\r\n                        <DroppableContainer isDraggingOver={snapshot.isDraggingOver}>\r\n                            <Header css={{display:\"flex\", placeContent:\"space-between\"}}><div>unassigned items</div> <FontAwesomeIcon icon={faPlus} css={{marginTop: 5, marginRight: 15}}/></Header>\r\n                        <DroppableZone\r\n                            ref={provided.innerRef}\r\n                            style={getListStyle(snapshot.isDraggingOver)}>\r\n                            {state.items.map((item : Item, index : number) => (\r\n                                <Draggable\r\n                                    key={item.id}\r\n                                    draggableId={item.id}\r\n                                    index={index}>\r\n                                    {(provided, snapshot) => (\r\n                                        <div\r\n                                            ref={provided.innerRef}\r\n                                            {...provided.draggableProps}\r\n                                            {...provided.dragHandleProps}\r\n                                            style={getItemStyle(\r\n                                                snapshot.isDragging,\r\n                                                provided.draggableProps.style\r\n                                            )}>\r\n                                            {item.name}\r\n                                        </div>\r\n                                    )}\r\n                                </Draggable>\r\n                            ))}\r\n                            {provided.placeholder}\r\n                        </DroppableZone>\r\n                        </DroppableContainer>\r\n                    )}\r\n                </Droppable>\r\n                <Droppable droppableId=\"droppable2\">\r\n                    {(provided, snapshot) => (\r\n                        <DroppableContainer isDraggingOver={snapshot.isDraggingOver}>\r\n                            <Header>expense items</Header>\r\n                            <DroppableZone\r\n                            ref={provided.innerRef}\r\n                            style={getListStyle(snapshot.isDraggingOver)}>\r\n                            {state.selected.map((item : Item, index : number) => (\r\n                                <Draggable\r\n                                    key={item.id}\r\n                                    draggableId={item.id}\r\n                                    index={index}>\r\n                                    {(provided, snapshot) => (\r\n                                        <div\r\n                                            ref={provided.innerRef}\r\n                                            {...provided.draggableProps}\r\n                                            {...provided.dragHandleProps}\r\n                                            style={getItemStyle(\r\n                                                snapshot.isDragging,\r\n                                                provided.draggableProps.style\r\n                                            )}>\r\n                                            {item.name}\r\n                                        </div>\r\n                                    )}\r\n                                </Draggable>\r\n                            ))}\r\n                            {provided.placeholder}\r\n                        </DroppableZone>\r\n                        </DroppableContainer>\r\n                    )}\r\n                </Droppable>\r\n                    </div>\r\n            </DragDropContext>\r\n        );\r\n}\r\n\r\nexport default MonthlyFinanceAssigner;"]},"metadata":{},"sourceType":"module"}